/*******************************************************************
Use these links and scripts at your own risk. 
Kevin Hill and Pluralsight are not responsible for their contents 
or any possible negative impact to your systems. Use 
only on test systems while you learn how they work.
*******************************************************************/


--Missing Indexes
SELECT
	db_name(mid.database_id) as [dbname],
	--Object_Name(mid.object_id, mid.database_id) as [Table],
	Right(Mid.statement,(PATINDEX('%.%',(reverse(mid.statement))))-1) as [table], --everything to the right of the '.'
    migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) AS improvement_measure,
    --migs.*, 
	migs.user_seeks,
	migs.last_user_seek,
	migs.avg_total_user_cost,
	migs.avg_user_impact,
	
	mid.database_id--, mid.[object_id]
	,'CREATE INDEX [missing_index_' + CONVERT (varchar, mig.index_group_handle) + '_' + CONVERT (varchar, mid.index_handle)
  + '_' + LEFT (PARSENAME(mid.statement, 1), 32) + ']'
  + ' ON ' + mid.statement
  + ' (' + ISNULL (mid.equality_columns,'')
    + CASE WHEN mid.equality_columns IS NOT NULL AND mid.inequality_columns IS NOT NULL THEN ',' ELSE '' END
    + ISNULL (mid.inequality_columns, '')
  + ')'
  + ISNULL (' INCLUDE (' + mid.included_columns + ')', '') AS create_index_statement
FROM sys.dm_db_missing_index_groups mig
INNER JOIN sys.dm_db_missing_index_group_stats migs ON migs.group_handle = mig.index_group_handle
INNER JOIN sys.dm_db_missing_index_details mid ON mig.index_handle = mid.index_handle
WHERE 1=1
	--and migs.avg_total_user_cost * (migs.avg_user_impact / 100.0) * (migs.user_seeks + migs.user_scans) > 100
	 --and (mid.database_id = 10 or mid.database_id = 7)
	 --and mid.database_id = 11
	 --and db_name(mid.database_id) = 'vt'
	 --and (mid.statement like '%ValidationSummary%' or mid.statement like '%Customer%')
	 --and mid.statement like '%Payments%'
	 and Right(Mid.statement,(PATINDEX('%.%',(reverse(mid.statement))))-1) = '[MyTable]'
	 --and avg_total_user_cost >10
	 --and migs.user_seeks > 100
ORDER BY migs.avg_total_user_cost * migs.avg_user_impact * (migs.user_seeks + migs.user_scans) DESC



